#include <SD.h>

#include <SPI.h>
#include <SSD_13XX.h>

#define __CS  2  //GPIO4 or GPIO2
#define __DC  5   //(D1)

// This was a really cool idea to speed things up, but it seems to cause instability no matter what?
#define X_SKIP 96
#define Y_SKIP 64

#include <PCF8574.h>

// Logo background
const byte logo[6144] PROGMEM = {};
// Startup code
const byte startup[4096] PROGMEM = {0x60, 0x0, 0x0, 0x0, 0x61, 0x1, 0x2, 0x0, 0x52, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x72, 0x0, 0xe8, 0x3, 0x51, 0x0, 0x0, 0x0, 0x47, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

PCF8574 pcf8574(0x20, 4, (uint8_t)0);

/*
 SCLK:D5
 MOSI:D7
*/


SSD_13XX tft = SSD_13XX(__CS, __DC);

uint16_t framebuffer[64][96];
uint32_t checksums[64/Y_SKIP][96/X_SKIP];
uint8_t flagbuffer[64][48];
uint8_t background[64][96];
uint8_t spritesheets[2][64][48];
uint32_t palette[256];
uint8_t palette_offset;
uint8_t test_flags;

uint16_t memory[8192];
uint16_t routines[256];
uint16_t stack[32];
uint8_t stack_size;

uint16_t window_pointer;

uint16_t instruction_pointer;
bool has_jumped;

bool input_state[8];
bool input_state_prev[8];
uint32_t input_poll_time;

void readPage(uint16_t page_index, uint16_t page_address) {
  if (page_address >= 8192 || (page_address & 0x07ff) != 0)
    return;
  String indexStr = String(page_index, HEX);
  while (indexStr.length() < 4)
    indexStr = "0" + indexStr;
  String fname = indexStr + "R.bin";
  if (SD.exists(fname.c_str())) {
    File file = SD.open(fname.c_str());
    file.read((uint8_t*)memory + 2 * page_address, 4096);
    file.close();
  }
  else {
    fname = indexStr + "W.bin";
    if (SD.exists(fname.c_str())) {
      File file = SD.open(fname.c_str());
      file.read((uint8_t*)memory + 2 * page_address, 4096);
      file.close();
    }
  }
}

void writePage(uint16_t page_index, uint16_t page_address) {
  if (page_address >= 8192 || (page_address & 0x07ff) != 0)
    return;
  String indexStr = String(page_index, HEX);
  while (indexStr.length() < 4)
    indexStr = "0" + indexStr;
  String fname = indexStr + "W.bin";
  if (SD.exists(fname.c_str())) {
    File file = SD.open(fname.c_str(), FILE_WRITE);
    file.seek(0);
    file.write((uint8_t*)memory + 2 * page_address, 4096);
    file.close();
  }
}

void setup() {
  Serial.begin(9600);
  if (!SD.begin(D8)) {
    Serial.println("SD ERROR");
    return;
  }
  Serial.println("SD SUCCESS");

  tft.begin();
  tft.setBackground(0);
  tft.setRotation(0);

  pcf8574.pinMode(P0, INPUT);
  pcf8574.pinMode(P1, INPUT);
  pcf8574.pinMode(P2, INPUT);
  pcf8574.pinMode(P3, INPUT);
  pcf8574.pinMode(P4, INPUT);
  pcf8574.pinMode(P5, INPUT);
  pcf8574.pinMode(P6, INPUT);
  pcf8574.pinMode(P7, INPUT);
  pcf8574.begin();

  for (int y = 0; y < 64; y++) {
    for (int x = 0; x < 96; x++) {
      framebuffer[y][x] = 0;
      if (x < 48)
        flagbuffer[y][x] = 0;
      background[y][x] = 0;
      spritesheets[x%2][y][x/2] = 0;
    }
  }

  for (int i = 0; i < 8192; i++) {
    memory[i] = 0;
  }
  for (int i = 0; i < 256; i++) {
    routines[i] = 0;
  }
  for (int i = 0; i < 32; i++) {
    stack[i] = 0;
  }

  for (int i = 0; i < 256; i++) {
    palette[i] = 0;
  }
  palette_offset = 0;

  test_flags = 0;

  readPage(0, 0x0000);
  memcpy_P((byte*)(memory) + 4096, startup, 4096);
  readPage(2, 0x1000);
  readPage(3, 0x1800);
  
  memcpy_P(background, logo, 6144);
  
  memory[1] = 1;
  memory[2] = 0xffff;
  window_pointer = 0x0080;
  instruction_pointer = 0x0800;

  for (int i = 0; i < 8; i++) {
    input_state[i] = 0;
    input_state_prev[i] = 0;
  }

  input_poll_time = millis();

  Serial.println("INIT SUCCESS");
}

inline uint16_t getR(uint8_t reg) {
  if (reg < 0x80)
    return memory[reg];
  else
    return memory[(uint16_t)(reg - 0x80) + window_pointer];
}

inline void setR(uint8_t reg, uint16_t value) {
  uint16_t address;
  if (reg < 0x80)
    address = reg;
  else
    address = (uint16_t)(reg - 0x80) + window_pointer;
  if (address <= 0x0002)
    return;
  memory[address] = value;
}

void loop(void) {
  // Poll input if necessary
  if (millis() >= input_poll_time) {
    input_poll_time = millis() + 25;
    for (int i = 0; i < 8; i++) {
      input_state_prev[i] = input_state[i];
    }
    PCF8574::DigitalInput di = pcf8574.digitalReadAll();
    input_state[0] = di.p0;
    input_state[1] = di.p1;
    input_state[2] = di.p2;
    input_state[3] = di.p3;
    input_state[4] = di.p4;
    input_state[5] = di.p5;
    input_state[6] = di.p6;
    input_state[7] = di.p7;
  }
  
  // Read the four bytes at IP
  uint16_t inst1, inst2;
  inst1 = memory[instruction_pointer];
  inst2 = memory[instruction_pointer+1];
  // Determine opcode and register indices
  uint8_t opcode, registerX, registerY, registerZ;
  opcode = inst1;
  registerX = inst1 >> 8;
  registerY = inst2;
  registerZ = inst2 >> 8;

  /*{
      String valStr;
      valStr = String(instruction_pointer, HEX);
      Serial.print(valStr.c_str());
      Serial.print(": ");
      valStr = String(opcode, HEX);
      Serial.print(valStr.c_str());
      Serial.print(" ");
      valStr = String(registerX, HEX);
      Serial.print(valStr.c_str());
      Serial.print(" ");
      valStr = String(registerY, HEX);
      Serial.print(valStr.c_str());
      Serial.print(" ");
      valStr = String(registerZ, HEX);
      Serial.print(valStr.c_str());
      Serial.println(" ");
      delay(1000);
    }*/

  bool had_jumped = has_jumped;
  has_jumped = false;
  
  switch (opcode) {
  case 0x00:
    // nop
    break;
  case 0x01:
    // end
    instruction_pointer += 2 * inst2;
    has_jumped = inst2 != 0;
    break;
  case 0x02:
    // if
    if (getR(registerX) == 0) {
      instruction_pointer += 2 * inst2;
      has_jumped = inst2 != 0;
    }
    break;
  case 0x03:
    // while
    /*{
      String valStr;
      valStr = String(instruction_pointer, HEX);
      Serial.print(valStr.c_str());
      Serial.print(": ");
      if (getR(registerX) == 0) {
        Serial.println("PASS");
      }
      else {
        Serial.println("LOOP");
      }
      delay(100);
    }*/
    if (getR(registerX) == 0) {
      instruction_pointer += 2 * inst2;
      has_jumped = inst2 != 0;
    }
    break;
  case 0x04:
    // else
    if (!had_jumped) {
      instruction_pointer += 2 * inst2;
      has_jumped = inst2 != 0;
    }
    break;
  case 0x05:
    // switch
    {
      uint16_t val = getR(registerX);
      instruction_pointer += 2 * val;
      has_jumped = val != 0;
    }
    break;
  case 0x06:
    // gz
    if (getR(registerX) == 0) {
      instruction_pointer += 2 * inst2;
      has_jumped = inst2 != 0;
    }
    break;
  case 0x07:
    // gnz
    if (getR(registerX) != 0) {
      instruction_pointer += 2 * inst2;
      has_jumped = inst2 != 0;
    }
    break;
  case 0x08:
    // def
    routines[registerX] = instruction_pointer + 2;
    instruction_pointer += 2 * inst2;
    has_jumped = inst2 != 0;
    break;
  case 0x09:
    // call
    stack[stack_size] = instruction_pointer + 2;
    stack_size++;
    instruction_pointer = routines[registerX];
    has_jumped = true;
    break;
  case 0x0a:
    // goto
    instruction_pointer = inst2;
    has_jumped = true;
    break;
  case 0x0b:
    // break
    instruction_pointer += 2 * inst2;
    has_jumped = inst2 != 0;
    break;
  case 0x0c:
    // continue
    instruction_pointer += 2 * inst2;
    has_jumped = inst2 != 0;
    break;
  case 0x0d:
    // return
    stack_size--;
    instruction_pointer = stack[stack_size];
    has_jumped = true;
    break;
  case 0x0e:
    // reset
    ESP.restart();
    break;
  case 0x0f:
    // DEBUG OPCODE
    {
      uint16_t val = getR(registerX);
      String valStr = String(val);
      Serial.println(valStr.c_str());
    }
    break;
  case 0x10:
    // +
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY + valZ);
    }
    break;
  case 0x11:
    // -
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY - valZ);
    }
    break;
  case 0x12:
    // *
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY * valZ);
    }
    break;
  case 0x13:
    // /
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY / valZ);
    }
    break;
  case 0x14:
    // s/
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, (uint16_t)(((int16_t)valY) / ((int16_t)valZ)));
    }
    break;
  case 0x15:
    // %
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY % valZ);
    }
    break;
  case 0x16:
    // s%
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, (uint16_t)(((int16_t)valY) % ((int16_t)valZ)));
    }
    break;
  case 0x17:
    // frac
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, (uint16_t)((((uint32_t)valY) << 16) / valZ));
    }
    break;
  case 0x18:
    // sfrac
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, (uint16_t)((((int32_t)valY) << 16) / ((int16_t)valZ)));
      // TODO: CHECK -- NOT SURE IF THIS IS CORRECT?
    }
    break;
  case 0x19:
    // ==
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY == valZ);
    }
    break;
  case 0x1a:
    // !=
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY != valZ);
    }
    break;
  case 0x1b:
    // <
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY < valZ);
    }
    break;
  case 0x1c:
    // s<
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((int16_t)valY) < ((int16_t)valZ));
    }
    break;
  case 0x1d:
    // <=
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY <= valZ);
    }
    break;
  case 0x1e:
    // s<=
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((int16_t)valY) <= ((int16_t)valZ));
    }
    break;
  case 0x1f:
    // &
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY & valZ);
    }
    break;
  case 0x20:
    // &&
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY && valZ);
    }
    break;
  case 0x21:
    // |
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY | valZ);
    }
    break;
  case 0x22:
    // ^
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY ^ valZ);
    }
    break;
  case 0x23:
    // <<
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY << valZ);
    }
    break;
  case 0x24:
    // >>
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, valY >> valZ);
    }
    break;
  case 0x25:
    // ?
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      if (valY == 0)
        setR(registerX, valZ);
    }
    break;
  case 0x26:
    // absgn
    {
      uint16_t valZ = getR(registerZ);
      if (valZ > 0) {
        setR(registerX, valZ);
        setR(registerY, 1);
      }
      else if (valZ < 0) {
        setR(registerX, -valZ);
        setR(registerY, -1);
      }
      else {
        setR(registerX, 0);
        setR(registerY, 0);
      }
    }
    break;
  case 0x27:
    // sqrt
    {
      uint16_t valZ = getR(registerZ);
      float answer = sqrt(valZ);
      uint32_t ans2 = (uint32_t)(answer * 65536);
      setR(registerX, (uint16_t)(ans2 >> 16));
      setR(registerY, (uint16_t)ans2);
    }
    break;
  case 0x28:
    // red
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((valZ & 0xf8) << 8) | (valY & 0x07ff));
    }
    break;
  case 0x29:
    // green
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((valZ & 0xfc) << 3) | (valY & 0xf81f));
    }
    break;
  case 0x2a:
    // blue
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((valZ & 0xf8) >> 3) | (valY & 0xffe0));
    }
    break;
  case 0x2b:
    // +c
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((uint32_t)(valY) + (uint32_t)(valZ)) >> 16);
    }
    break;
  case 0x2c:
    // -c
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((uint32_t)(valY) - (uint32_t)(valZ)) >> 16);
    }
    break;
  case 0x2d:
    // *c
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, ((uint32_t)(valY) * (uint32_t)(valZ)) >> 16);
    }
    break;
  case 0x2e:
    // conc
    {
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      setR(registerX, (valY << 8) | (valZ & 0xff));
    }
    break;
  case 0x2f:
    // high
    {
      uint16_t valY = getR(registerY);
      setR(registerX, valY >> 8);
    }
    break;
  case 0x30:
    // =
    setR(registerX, getR(registerY));
    break;
  case 0x31:
    // =
    setR(registerX, inst2);
    break;
  case 0x32:
    // load
    setR(registerX, memory[getR(registerY)]);
    break;
  case 0x33:
    // load
    setR(registerX, memory[inst2]);
    break;
  case 0x34:
    // store
    {
      uint16_t addr = getR(registerY);
      if (addr > 2 && addr < 8192)
        memory[addr] = getR(registerX);
    }
    break;
  case 0x35:
    // store
    {
      uint16_t addr = inst2;
      if (addr > 2 && addr < 8192)
        memory[addr] = getR(registerX);
    }
    break;
  case 0x36:
    // window
    {
      uint16_t addr = getR(registerY);
      if (addr < 8192 - 128)
        window_pointer = addr;
    }
    break;
  case 0x37:
    // window
    {
      uint16_t addr = inst2;
      if (addr < 8192 - 128)
        window_pointer = addr;
    }
    break;
  case 0x38:
    // skip
    {
      uint16_t addr = getR(registerY);
      if (addr < 8192) {
        stack_size = 0;
        instruction_pointer = addr - 2;
        has_jumped = true;
      }
    }
    break;
  case 0x39:
    // skip
    {
      uint16_t addr = inst2;
      if (addr < 8192) {
        stack_size = 0;
        instruction_pointer = addr - 2;
        has_jumped = true;
      }
    }
    break;
  case 0x3a:
    // skim
    {
      uint16_t addr = getR(registerY);
      uint16_t maxaddr = (addr & 0xf800) + 2048;
      if (maxaddr > 8192)
        maxaddr = 8192;
      for (uint16_t ptr = addr & 0xfffe; ptr < maxaddr; ptr += 2) {
        if ((memory[ptr] & 0xff) == 0x08)
          routines[memory[ptr] >> 8] = ptr + 2;
      }
    }
    break;
  case 0x3b:
    // skim
    {
      uint16_t addr = inst2;
      uint16_t maxaddr = (addr & 0xf800) + 2048;
      if (maxaddr > 8192)
        maxaddr = 8192;
      for (uint16_t ptr = addr & 0xfffe; ptr < maxaddr; ptr += 2) {
        if ((memory[ptr] & 0xff) == 0x08)
          routines[memory[ptr] >> 8] = ptr + 2;
      }
    }
    break;
  case 0x40:
    // read
    readPage(getR(registerX), getR(registerY));
    break;
  case 0x41:
    // read
    readPage(getR(registerX), inst2);
    break;
  case 0x42:
    // write
    writePage(getR(registerX), getR(registerY));
    break;
  case 0x43:
    // write
    writePage(getR(registerX), inst2);
    break;
  case 0x44:
    // readb
    {
      String indexStr = String(getR(registerX), HEX);
      while (indexStr.length() < 4)
        indexStr = "0" + indexStr;
      String fname = "B" + indexStr + ".bin";
      if (SD.exists(fname.c_str())) {
        File file = SD.open(fname.c_str());
        file.read((uint8_t*)background, 6144);
        file.close();
      }
    }
    break;
  case 0x45:
    // reads
    {
      uint16_t ry = getR(registerY);
      if (ry > 1)
        break;
      String indexStr = String(getR(registerX), HEX);
      while (indexStr.length() < 4)
        indexStr = "0" + indexStr;
      String fname = "S" + indexStr + ".bin";
      if (SD.exists(fname.c_str())) {
        File file = SD.open(fname.c_str());
        file.read((uint8_t*)spritesheets + 3072 * ry, 3072);
        file.close();
      }
    }
    break;
  case 0x46:
    // readp
    {
      String indexStr = String(getR(registerX), HEX);
      while (indexStr.length() < 4)
        indexStr = "0" + indexStr;
      String fname = "P" + indexStr + ".bin";
      if (SD.exists(fname.c_str())) {
        File file = SD.open(fname.c_str());
        file.read((uint8_t*)palette, 1024);
        file.close();
      }
    }
    break;
  case 0x47:
    // rex
    {
      uint16_t current_page = instruction_pointer & 0xf800;
      readPage(getR(registerX), current_page);
      instruction_pointer = current_page - 2;
      stack_size = 0;
      has_jumped = true;
    }
    break;
  case 0x50:
    // refresh
    {
    uint32_t m1 = millis();
    for (int y = 0; y < 64; y++) {
      for (int x = 0; x < 96; x++) {
        framebuffer[y][x] = (framebuffer[y][x] >> 8) | (framebuffer[y][x] << 8);
      }
    }
    for (int yy = 0; yy < 64; yy += Y_SKIP) {
      for (int xx = 0; xx < 96; xx += X_SKIP) {
        /*uint32_t csum = 0;
        uint32_t s1 = 1;
        uint32_t s2 = 0;
        for (int y = yy; y < yy+Y_SKIP; y++) {
          for (int x = xx; x < xx+X_SKIP; x++) {
            s1 = (s1 + framebuffer[y][x]) % 65521;
            s2 = (s2 + s1) % 65521;
          }
        }
        csum = (s2 << 16) | s1;
        if (csum == checksums[yy/Y_SKIP][xx/X_SKIP])
          continue;
        checksums[yy/Y_SKIP][xx/X_SKIP] = csum;*/
        tft.startPushData(xx, yy, xx+X_SKIP-1, yy+Y_SKIP-1);
        // GPIO_REG_WRITE(GPIO_OUT_W1TC_ADDRESS, _BV(__CS));
        // GPIO_REG_WRITE(GPIO_OUT_W1TC_ADDRESS, _BV(__DC)); // enableCommandStream
        // SPI.write(CMD_SETCOLUMN); //Column
        // SPI.write(xx); SPI.write(xx+X_SKIP-1);
        // SPI.write(CMD_SETROW); //Page
        // SPI.write(yy); SPI.write(yy+Y_SKIP-1);
        /*for (int y = yy; y < yy+Y_SKIP; y++) {
          for (int x = xx; x < xx+X_SKIP; x+=2) {
            GPIO_REG_WRITE(GPIO_OUT_W1TS_ADDRESS, _BV(__DC)); // enableDataStream
            SPI.write32((framebuffer[y][x] << 16) | (framebuffer[y][x+1])); // spiwrite16
            // tft.pushData(framebuffer[y][x]);
            // tft.drawPixel(x, y, framebuffer[y][x]); WAY SLOW
          }
        }*/
        GPIO_REG_WRITE(GPIO_OUT_W1TS_ADDRESS, _BV(__DC));
        SPI.writeBytes((uint8_t*)framebuffer, 12288);
        tft.endPushData();
        // GPIO_REG_WRITE(GPIO_OUT_W1TS_ADDRESS, _BV(__CS));
      }
    }
    for (int y = 0; y < 64; y++) {
      for (int x = 0; x < 96; x++) {
        framebuffer[y][x] = (framebuffer[y][x] >> 8) | (framebuffer[y][x] << 8);
      }
    }
    if (millis() == m1)
      delay(1); // For sanity
    }
    break;
  case 0x51:
    // clear
    {
      uint16_t color = getR(registerX);
      for (int y = 0; y < 64; y++) {
        for (int x = 0; x < 96; x++) {
          framebuffer[y][x] = color;
          if (x < 48)
            flagbuffer[y][x] = 0;
        }
      }
    }
    break;
  case 0x52:
    // dbg
    {
      uint16_t valX = getR(registerX);
      uint8_t rowX = (uint8_t)(valX);
      uint8_t colX = (uint8_t)(valX >> 8);
      for (int y = 0; y < 64; y++) {
        for (int x = 0; x < 96; x++) {
          int y2 = y + rowX;
          if (y2 < 0)
            y2 += 64;
          y2 = y2 % 64;
          int x2 = x + colX;
          if (x2 < 0)
            x2 += 96;
          x2 = x2 % 96;
          uint32_t color = palette[(uint8_t)(background[y2][x2] + palette_offset)];
          if ((x & 1) == 0)
            flagbuffer[y][x >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[y][x >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[y][x] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x53:
    // dbg16
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 16; r++) {
        for (int c = 0; c < 16; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint32_t color = palette[(uint8_t)(background[r + rowX][c + colX] + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x54:
    // dbg8
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 8; r++) {
        for (int c = 0; c < 8; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint32_t color = palette[(uint8_t)(background[r + rowX][c + colX] + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x55:
    // dbg4
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 4; r++) {
        for (int c = 0; c < 4; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint32_t color = palette[(uint8_t)(background[r + rowX][c + colX] + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x56:
    // dbg
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      uint8_t widZ = (uint8_t)(valZ);
      uint8_t heiZ = (uint8_t)(valZ >> 8);
      for (int r = 0; r < heiZ; r++) {
        for (int c = 0; c < widZ; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint32_t color = palette[(uint8_t)(background[r + rowX][c + colX] + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x57:
    // dss
    {
      uint16_t valX = getR(registerX);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      for (int r = 0; r < 64; r++) {
        for (int c = 0; c < 96; c++) {
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if ((c & 1) == 0)
            flagbuffer[r][c >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[r][c >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[r][c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x58:
    // dss16
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 16; r++) {
        for (int c = 0; c < 16; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x59:
    // dss8
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 8; r++) {
        for (int c = 0; c < 8; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x5a:
    // dss4
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 4; r++) {
        for (int c = 0; c < 4; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x5b:
    // dss
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      uint8_t widZ = (uint8_t)(valZ);
      uint8_t heiZ = (uint8_t)(valZ >> 8);
      for (int r = 0; r < heiZ; r++) {
        for (int c = 0; c < widZ; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x5c:
    // dpx
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      int8_t rowX = (int8_t)(valX);
      int8_t colX = (int8_t)(valX >> 8);
      if (rowX < 0)
        break;
      if (rowX >= 64)
        break;
      if (colX < 0)
        break;
      if (colX >= 96)
        break;
      framebuffer[rowX][colX] = valY;
      Serial.print(rowX);
      Serial.print(" ");
      Serial.print(colX);
      Serial.print(" ");
      Serial.println(valY);
    }
    break;
  case 0x5d:
    // dchar
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      int8_t rowX = (int8_t)((valX << 6) + (valZ >> 4) * 8);
      int8_t colX = (int8_t)((valZ & 0xf) * 6);
      int8_t rowY = (uint8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 8; r++) {
        for (int c = 0; c < 6; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
          uint8_t index = indices & 0xf;
          if (((c + colX) & 1) == 0)
            index = indices >> 4;
          uint32_t color = palette[(uint8_t)(index + palette_offset)];
          if (((colY + c) & 1) == 0)
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
          else
            flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
          if ((color & 0x00010000) == 0)
            framebuffer[rowY + r][colY + c] = (uint16_t)(color);
        }
      }
    }
    break;
  case 0x5e:
    // dstr
    {
      uint16_t valX = getR(registerX);
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      uint16_t pointer = valZ * 2;
      while (true) {
        uint8_t charInd = *((uint8_t*)(memory) + pointer);
        if (charInd == 0)
          break;
        if (charInd == 13) {
          colY -= 96;
          while (colY >= 96)
            colY += 6;
          pointer++;
          continue;
        }
        if (charInd == 10) {
          colY -= 96;
          while (colY >= 96)
            colY += 6;
          rowY += 8;
          pointer++;
          continue;
        }
        if (charInd == 127) {
          pointer++;
          continue;
        }
        int8_t rowX = (int8_t)((valX << 6) + (charInd >> 4) * 8);
        int8_t colX = (int8_t)((charInd & 0xf) * 6);
        for (int r = 0; r < 8; r++) {
          for (int c = 0; c < 6; c++) {
            if (rowY + r < 0)
              continue;
            if (rowY + r >= 64)
              continue;
            if (colY + c < 0)
              continue;
            if (colY + c >= 96)
              continue;
            uint8_t indices = spritesheets[(r + rowX) >> 6][(r + rowX) & 0x3f][(c + colX) >> 1];
            uint8_t index = indices & 0xf;
            if (((c + colX) & 1) == 0)
              index = indices >> 4;
            uint32_t color = palette[(uint8_t)(index + palette_offset)];
            if (((colY + c) & 1) == 0)
              flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 16);
            else
              flagbuffer[rowY + r][(colY + c) >> 1] |= (uint8_t)((color & 0x00f00000) >> 20);
            if ((color & 0x00010000) == 0)
              framebuffer[rowY + r][colY + c] = (uint16_t)(color);
          }
        }

        pointer++;
        colY += 6;
        if (colY > 90) {
          colY -= 96;
          if (colY >= 96)
            colY += 6;
          rowY += 8;
        }
      }
    }
    break;
  case 0x60:
    // clearp
    {
      uint32_t color = (uint32_t)(getR(registerY)) | ((uint32_t)(getR(registerZ)) << 16);
      for (int i = 0; i < 256; i++) {
        palette[i] = color;
      }
    }
    break;
  case 0x61:
    // setp
    {
      uint32_t color = (uint32_t)(getR(registerY)) | ((uint32_t)(getR(registerZ)) << 16);
      uint8_t i = getR(registerX);
      palette[i] = color;
    }
    break;
  case 0x62:
    // getp
    {
      uint8_t i = getR(registerX);
      uint32_t color = palette[i];
      setR(registerY, (uint16_t)color);
      setR(registerZ, (uint16_t)(color >> 16));
    }
    break;
  case 0x63:
    // setpoffs
    palette_offset = (uint8_t)(getR(registerY));
    break;
  case 0x64:
    // setpoffs
    palette_offset = (uint8_t)(inst2);
    break;
  case 0x70:
    // frame
    {
      uint16_t rate = getR(registerX);
      if (rate == 0)
        rate = 33; // Backwards compatibility
      while (true) {
        uint32_t m = millis();
        if ((m % 100) % rate == 0)
          break;
        /*if (m % 100 == 0 || m % 100 == 33 || m % 100 == 67)
          break;*/
      }
    }
    break;
  case 0x71:
    // delay
    {
      uint16_t ms = getR(registerY);
      delay(ms);
    }
    break;
  case 0x72:
    // delay
    {
      uint16_t ms = inst2;
      delay(ms);
    }
    break;
  case 0x80:
    // button
    {
      uint16_t val = getR(registerY);
      if (val > 7)
        break;
      setR(registerX, input_state[val]);
    }
    break;
  case 0x81:
    // button
    {
      uint16_t val = inst2;
      if (val > 7)
        break;
      setR(registerX, input_state[val]);
    }
    break;
  case 0x82:
    // buttonp
    {
      uint16_t val = getR(registerY);
      if (val > 7)
        break;
      setR(registerX, input_state[val] && !input_state_prev[val]);
    }
    break;
  case 0x83:
    // buttonp
    {
      uint16_t val = inst2;
      if (val > 7)
        break;
      setR(registerX, input_state[val] && !input_state_prev[val]);
    }
    break;
  case 0x84:
    // buttonr
    {
      uint16_t val = getR(registerY);
      if (val > 7)
        break;
      setR(registerX, !input_state[val] && input_state_prev[val]);
    }
    break;
  case 0x85:
    // buttonr
    {
      uint16_t val = inst2;
      if (val > 7)
        break;
      setR(registerX, !input_state[val] && input_state_prev[val]);
    }
    break;
  case 0x90:
    // colflags
    test_flags = getR(registerY) & 0xf;
    break;
  case 0x91:
    // colflags
    test_flags = inst2 & 0xf;
    break;
  case 0x92:
    // col
    {
      bool done = 0;
      for (int y = 0; y < 64; y++) {
        for (int x = 0; x < 96; x++) {
          uint8_t flags;
          if ((x & 1) == 1)
            flags = flagbuffer[y][x >> 1] & 0xf;
          else
            flags = flagbuffer[y][x >> 1] >> 4;
          if ((flags & test_flags) == test_flags) {
            done = 1;
            break;
          }
        }
        if (done)
          break;
      }
      setR(registerX, done);
    }
    break;
  case 0x93:
    // col16
    {
      bool done = 0;
      uint16_t valY = getR(registerY);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 16; r++) {
        for (int c = 0; c < 16; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t flags;
          if (((colY + c) & 1) == 1)
            flags = flagbuffer[rowY + r][(colY + c) >> 1] & 0xf;
          else
            flags = flagbuffer[rowY + r][(colY + c) >> 1] >> 4;
          if ((flags & test_flags) == test_flags) {
            done = 1;
            break;
          }
        }
        if (done)
          break;
      }
      setR(registerX, done);
    }
    break;
  case 0x94:
    // col8
    {
      bool done = 0;
      uint16_t valY = getR(registerY);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 8; r++) {
        for (int c = 0; c < 8; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t flags;
          if (((colY + c) & 1) == 1)
            flags = flagbuffer[rowY + r][(colY + c) >> 1] & 0xf;
          else
            flags = flagbuffer[rowY + r][(colY + c) >> 1] >> 4;
          if ((flags & test_flags) == test_flags) {
            done = 1;
            break;
          }
        }
        if (done)
          break;
      }
      setR(registerX, done);
    }
    break;
  case 0x95:
    // col4
    {
      bool done = 0;
      uint16_t valY = getR(registerY);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      for (int r = 0; r < 4; r++) {
        for (int c = 0; c < 4; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t flags;
          if (((colY + c) & 1) == 1)
            flags = flagbuffer[rowY + r][(colY + c) >> 1] & 0xf;
          else
            flags = flagbuffer[rowY + r][(colY + c) >> 1] >> 4;
          if ((flags & test_flags) == test_flags) {
            done = 1;
            break;
          }
        }
        if (done)
          break;
      }
      setR(registerX, done);
    }
    break;
  case 0x96:
    // col
    {
      bool done = 0;
      uint16_t valY = getR(registerY);
      uint16_t valZ = getR(registerZ);
      int8_t rowY = (int8_t)(valY);
      int8_t colY = (int8_t)(valY >> 8);
      uint8_t widZ = (uint8_t)(valZ);
      uint8_t heiZ = (uint8_t)(valZ >> 8);
      for (int r = 0; r < heiZ; r++) {
        for (int c = 0; c < widZ; c++) {
          if (rowY + r < 0)
            continue;
          if (rowY + r >= 64)
            continue;
          if (colY + c < 0)
            continue;
          if (colY + c >= 96)
            continue;
          uint8_t flags;
          if (((colY + c) & 1) == 1)
            flags = flagbuffer[rowY + r][(colY + c) >> 1] & 0xf;
          else
            flags = flagbuffer[rowY + r][(colY + c) >> 1] >> 4;
          if ((flags & test_flags) == test_flags) {
            done = 1;
            break;
          }
        }
        if (done)
          break;
      }
      setR(registerX, done);
    }
    break;
  case 0xa0:
    // itoa
    {
      uint16_t addr = getR(registerY);
      String str = String((uint16_t)getR(registerX));
      memcpy((void*)(&memory[addr]), (void*)(str.c_str()), 8);
    }
    break;
  case 0xa1:
    // itoa
    {
      uint16_t addr = inst2;
      String str = String((uint16_t)getR(registerX));
      memcpy((void*)(&memory[addr]), (void*)(str.c_str()), 8);
    }
    break;
  case 0xa2:
    // sitoa
    {
      uint16_t addr = getR(registerY);
      String str = String((int16_t)getR(registerX));
      memcpy((void*)(&memory[addr]), (void*)(str.c_str()), 8);
    }
    break;
  case 0xa3:
    // sitoa
    {
      uint16_t addr = inst2;
      String str = String((int16_t)getR(registerX));
      memcpy((void*)(&memory[addr]), (void*)(str.c_str()), 8);
    }
    break;
  case 0xa4:
    // strw
    {
      
      uint16_t pointer = getR(registerY) * 2;
      uint16_t w = 0;
      uint16_t maxW = 0;
      while (true) {
        uint8_t charInd = *((uint8_t*)(memory) + pointer);
        if (charInd == 0)
          break;
        if (charInd == 13) {
          w = 0;
          pointer++;
          continue;
        }
        if (charInd == 10) {
          w = 0;
          pointer++;
          continue;
        }
        if (charInd == 127) {
          pointer++;
          continue;
        }
        w += 6;
        if (w > maxW)
          maxW = w;
        pointer++;
      }
      setR(registerX, maxW);
    }
    break;
  case 0xa5:
    // strh
    {
      
      uint16_t pointer = getR(registerY) * 2;
      uint16_t h = 8;
      while (true) {
        uint8_t charInd = *((uint8_t*)(memory) + pointer);
        if (charInd == 0)
          break;
        if (charInd == 13) {
          h += 8;
          pointer++;
          continue;
        }
        if (charInd == 10) {
          h += 8;
          pointer++;
          continue;
        }
        if (charInd == 127) {
          pointer++;
          continue;
        }
        pointer++;
      }
      setR(registerX, h);
    }
    break;
  case 0xf0:
    // random
    {
      uint16_t val = getR(registerY);
      setR(registerX, random(val));
    }
    break;
  case 0xf1:
    // random
    {
      uint16_t val = inst2;
      setR(registerX, random(val));
    }
    break;
  }

  instruction_pointer += 2;
}
